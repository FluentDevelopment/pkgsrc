$NetBSD: patch-al,v 1.5 2002/01/03 20:40:43 tron Exp $

--- ../gcc-2.95.3/gcc/config/i386/i386.h.orig	Sun Apr 25 13:43:49 1999
+++ ../gcc-2.95.3/gcc/config/i386/i386.h	Thu Jan  3 20:37:53 2002
@@ -258,15 +258,15 @@
    option if the fixed part matches.  The actual option name is made
    by appending `-m' to the specified name.  */
 #define TARGET_OPTIONS							\
-{ { "cpu=",		&ix86_cpu_string, "Schedule code for given CPU"}, \
-  { "arch=",		&ix86_arch_string, "Generate code for given CPU"}, \
-  { "reg-alloc=",	&i386_reg_alloc_order, "Control allocation order of integer registers" }, \
-  { "regparm=",		&i386_regparm_string, "Number of registers used to pass integer arguments" }, \
-  { "align-loops=",	&i386_align_loops_string, "Loop code aligned to this power of 2" }, \
-  { "align-jumps=",	&i386_align_jumps_string, "Jump targets are aligned to this power of 2" }, \
-  { "align-functions=",	&i386_align_funcs_string, "Function starts are aligned to this power of 2" }, \
-  { "preferred-stack-boundary=", &i386_preferred_stack_boundary_string, "Attempt to keep stack aligned to this power of 2" }, \
-  { "branch-cost=",	&i386_branch_cost_string, "Branches are this expensive (1-5, arbitrary units)" },			\
+{ { "cpu=",		(const char **)&ix86_cpu_string, "Schedule code for given CPU"}, \
+  { "arch=",		(const char **)&ix86_arch_string, "Generate code for given CPU"}, \
+  { "reg-alloc=",	(const char **)&i386_reg_alloc_order, "Control allocation order of integer registers" }, \
+  { "regparm=",		(const char **)&i386_regparm_string, "Number of registers used to pass integer arguments" }, \
+  { "align-loops=",	(const char **)&i386_align_loops_string, "Loop code aligned to this power of 2" }, \
+  { "align-jumps=",	(const char **)&i386_align_jumps_string, "Jump targets are aligned to this power of 2" }, \
+  { "align-functions=",	(const char **)&i386_align_funcs_string, "Function starts are aligned to this power of 2" }, \
+  { "preferred-stack-boundary=", (const char **)&i386_preferred_stack_boundary_string, "Attempt to keep stack aligned to this power of 2" }, \
+  { "branch-cost=",	(const char **)&i386_branch_cost_string, "Branches are this expensive (1-5, arbitrary units)" },			\
   SUBTARGET_OPTIONS							\
 }
 
@@ -2773,15 +2773,15 @@
 #endif
 
 /* Variables in i386.c */
-extern char *ix86_cpu_string;			/* for -mcpu=<xxx> */
-extern char *ix86_arch_string;			/* for -march=<xxx> */
-extern char *i386_reg_alloc_order;		/* register allocation order */
-extern char *i386_regparm_string;		/* # registers to use to pass args */
-extern char *i386_align_loops_string;		/* power of two alignment for loops */
-extern char *i386_align_jumps_string;		/* power of two alignment for non-loop jumps */
-extern char *i386_align_funcs_string;		/* power of two alignment for functions */
+extern char *ix86_cpu_string;		/* for -mcpu=<xxx> */
+extern char *ix86_arch_string;		/* for -march=<xxx> */
+extern char *i386_reg_alloc_order;	/* register allocation order */
+extern char *i386_regparm_string;	/* # registers to use to pass args */
+extern char *i386_align_loops_string;	/* power of two alignment for loops */
+extern char *i386_align_jumps_string;	/* power of two alignment for non-loop jumps */
+extern char *i386_align_funcs_string;	/* power of two alignment for functions */
 extern char *i386_preferred_stack_boundary_string;/* power of two alignment for stack boundary */
-extern char *i386_branch_cost_string;		/* values 1-5: see jump.c */
+extern char *i386_branch_cost_string;	/* values 1-5: see jump.c */
 extern int i386_regparm;			/* i386_regparm_string as a number */
 extern int i386_align_loops;			/* power of two alignment for loops */
 extern int i386_align_jumps;			/* power of two alignment for non-loop jumps */
