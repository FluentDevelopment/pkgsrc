# start of install
#
# $NetBSD: install,v 1.35 2005/01/28 07:37:55 jlam Exp $

case ${STAGE} in
PRE-INSTALL)
	#
	# Require that necessary users and groups exist or else fail the
	# installation of the package.
	#
	case ${_PKG_CREATE_USERGROUP} in
	YES)	${TEST} -x ./+USERGROUP && ./+USERGROUP ADD ${PKG_METADATA_DIR} ;;
	esac
	if ${TEST} -x ./+USERGROUP && ./+USERGROUP CHECK-ADD ${PKG_METADATA_DIR}; then
		:
	else
		exit 1
	fi
	#
	# Create package directories at pre-install time.
	#
	if [ "${PKG_INSTALLATION_TYPE}" = "pkgviews" -a			\
	     "${_PKG_CONFIG}" = "YES" -a -n "${CONF_DEPENDS}" ]; then
		pkg=`${PKG_ADMIN} -b -d ${DEPOTBASE} -s "" lsbest "${CONF_DEPENDS}"`
		sysconfdir=`${PKG_INFO} -B -K ${DEPOTBASE} $pkg |	\
			${AWK} '/^PKG_SYSCONFDIR=/ {			\
				gsub("^PKG_SYSCONFDIR=[ 	]*", ""); \
				print;					\
			}'						\
		`
		if [ -d $sysconfdir -a ! -d ${PKG_SYSCONFDIR} ]; then
			${MKDIR} -p `${DIRNAME} ${PKG_SYSCONFDIR}`
			${LN} -sf $sysconfdir ${PKG_SYSCONFDIR}
		fi
	fi
	case ${_PKG_CONFIG} in
        YES)	${TEST} -x ./+DIRS && ./+DIRS ADD ${PKG_METADATA_DIR} ;;
        esac
        ;;

POST-INSTALL)
	#
	# Note any missing package directories.
	#
	${TEST} -x ./+DIRS && ./+DIRS CHECK-ADD ${PKG_METADATA_DIR}

	msginit
	if [ "${_PKG_CONFIG}" = "YES" ]; then
		if [ -n "${CONF_FILES}" -o				\
		     -n "${CONF_FILES_PERMS}" -o			\
		     -n "${SUPPORT_FILES}" -o				\
		     -n "${SUPPORT_FILES_PERMS}" ] ||			\
		   [ "${_PKG_RCD_SCRIPTS}" = "YES" -a			\
		     -n "${RCD_SCRIPTS}" ]; then
			${CAT} << EOF

===> Installing configuration/support files for ${PKGNAME}

EOF
		fi
	fi
	_print_file_header=1
	eval set -- ${CONF_FILES}
	while [ $# -gt 0 ]; do
		samplefile="$1"; file="$2"
		shift; shift

		if [ "${_PKG_CONFIG}" = "NO" ]; then
			if [ ${_print_file_header} -gt 0 ]; then
				_print_file_header=0
				msgadd ""
				msgadd "The following files should be created for ${PKGNAME}:"
				msgadd ""
			fi
			msgadd "#${file} (m=@CONF_FILES_MODE@)"
		elif [ -f "${file}" ]; then
			if [ ! "${file}" -ef "${samplefile}" ]; then
				${ECHO} "	${file} already exists, example file is"
				${ECHO} "           ${samplefile}"
			fi
		else
			if [ -f "${samplefile}" ]; then
				${ECHO} "	${file}"
				${CP} "${samplefile}" "${file}"
				${CHMOD} @CONF_FILES_MODE@ "${file}"
			fi
		fi
	done
	eval set -- ${SUPPORT_FILES}
	while [ $# -gt 0 ]; do
		samplefile="$1"; file="$2"
		shift; shift

		if [ "${_PKG_CONFIG}" = "NO" ]; then
			if [ ${_print_file_header} -gt 0 ]; then
				_print_file_header=0
				msgadd ""
				msgadd "The following files should be created for ${PKGNAME}:"
				msgadd ""
			fi
			msgadd "#${file} (m=@SUPPORT_FILES_MODE@)"
		elif [ -f "${file}" ]; then
			if [ ! "${file}" -ef "${samplefile}" ]; then
				${ECHO} "	${file} already exists, example file is"
				${ECHO} "	    ${samplefile}"
			fi
		else
			if [ -f "${samplefile}" ]; then
				${ECHO} "	${file}"
				${CP} "${samplefile}" "${file}"
				${CHMOD} @SUPPORT_FILES_MODE@ "${file}"
			fi
		fi
	done
	eval set -- ${CONF_FILES_PERMS} ${SUPPORT_FILES_PERMS}
	while [ $# -gt 0 ]; do
		samplefile="$1"; file="$2"
		owner="$3"; group="$4"; mode="$5"
		shift; shift; shift; shift; shift

		if [ "${_PKG_CONFIG}" = "NO" ]; then
			if [ ${_print_file_header} -gt 0 ]; then
				_print_file_header=0
				msgadd ""
				msgadd "The following files should be created for ${PKGNAME}:"
				msgadd ""
			fi
			msgadd "#${file} (o=${owner}, g=${group}, m=${mode})"
		elif [ -f ${file} ]; then
			if [ ! "${file}" -ef "${samplefile}" ]; then
				${ECHO} "	${file} already exists, example file is"
				${ECHO} "	    ${samplefile}"
			fi
		else
			if [ -f "${samplefile}" ]; then
				${ECHO} "	${file}"
				${CP} "${samplefile}" "${file}"
				${CHOWN} "${owner}" "${file}"
				${CHGRP} "${group}" "${file}"
				${CHMOD} ${mode} "${file}"
			fi
		fi
	done
	eval set -- ${RCD_SCRIPTS}
	for script; do
		samplefile="${PKG_PREFIX}/${RCD_SCRIPTS_EXAMPLEDIR}/${script}"
		file="${RCD_SCRIPTS_DIR}/${script}"

		if [ "${_PKG_CONFIG}" = "NO" -o				\
		     "${_PKG_RCD_SCRIPTS}" = "NO" ]; then
			if [ ${_print_file_header} -gt 0 ]; then
				_print_file_header=0
				msgadd ""
				msgadd "The following files should be created for ${PKGNAME}:"
				msgadd ""
			fi
			msgadd "#${file} (m=@RCD_SCRIPTS_MODE@)"
		elif [ -f "${file}" ]; then
			if [ ! "${file}" -ef "${samplefile}" ]; then
				${ECHO} "	${file} already exists, example file is"
				${ECHO} "	    ${samplefile}"
			fi
		else
			if [ -f "${samplefile}" ]; then
				${ECHO} "	${file}"
				${CP} "${samplefile}" "${file}"
				${CHMOD} @RCD_SCRIPTS_MODE@ "${file}"
			fi
		fi
	done
	_print_special_header=1
	eval set -- ${SPECIAL_PERMS}
	while [ $# -gt 0 ]; do
		file="$1"; owner="$2"; group="$3"; mode="$4"
		shift; shift; shift; shift

		if [ ${_print_special_header} -gt 0 ]; then
			_print_special_header=0
			msgadd ""
			msgadd "The following files and directories have special permissions:"
			msgadd ""
		fi
		msgadd "#${file} (o=${owner}, g=${group}, m=${mode})"
		${CHOWN} "${owner}" "${file}"
		${CHGRP} "${group}" "${file}"
		${CHMOD} ${mode} "${file}"
	done
	if ! msgempty; then
		${ECHO} "==========================================================================="
		msgprint
		${ECHO} ""
		${ECHO} "==========================================================================="
	fi
	if [ "${_PKG_CONFIG}" = "YES" ]; then
		if [ -n "${CONF_FILES}" -o -n "${CONF_FILES_PERMS}" ]; then
			${CAT} << EOF

===========================================================================
You may wish to customize the following files for ${PKGNAME}:

EOF
			eval set -- ${CONF_FILES}
			while [ $# -gt 0 ]; do
				samplefile="$1"; file="$2"
				shift; shift

				${ECHO} "	${file}"
		       	done
			eval set -- ${CONF_FILES_PERMS}
			while [ $# -gt 0 ]; do
				samplefile="$1"; file="$2"
				owner="$3"; group="$4"; mode="$5"
				shift; shift; shift; shift; shift

				${ECHO} "	${file}"
			done
			${CAT} << EOF
===========================================================================
EOF
		fi
	fi
	;;

VIEW-INSTALL)
	if [ -n "${PKG_SHELL}" -a "${PKG_REGISTER_SHELLS}" = "YES" ]; then
		${ECHO} "===> Updating /etc/shells"
		${TOUCH} /etc/shells
		${CP} /etc/shells /etc/shells.pkgsrc."$$"
		(${GREP} -v "^${PKG_SHELL}" /etc/shells.pkgsrc."$$" || ${TRUE}; ${ECHO} ${PKG_SHELL}) > /etc/shells
		${RM} /etc/shells.pkgsrc."$$"
	fi
	#
	# If ${PKG_SYSCONFBASE} points outside of ${PREFIX}, then add the
	# package config files to the proper view.
	#
	if [ "${_PKG_CONFIG}" = "YES" -a -n "${PKG_SYSCONFDEPOTBASE}" ]; then
		if [ -n "${CONF_FILES}" -o				\
		     -n "${CONF_FILES_PERMS}" -o			\
		     -n "${SUPPORT_FILES}" -o				\
		     -n "${SUPPORT_FILES_PERMS}" ]; then
			${SETENV} PLIST_IGNORE_FILES="${CONF_IGNORE_FILES}" \
				${LINKFARM} -t ${PKG_SYSCONFVIEWBASE} -d ${PKG_SYSCONFDEPOTBASE} ${PKGNAME}
		fi
	fi
	;;
esac

# end of install
