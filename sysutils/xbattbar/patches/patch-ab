$NetBSD: patch-ab,v 1.4 2003/11/01 09:25:31 mycroft Exp $

--- xbattbar.c.orig	2001-02-02 16:25:29.000000000 +1100
+++ xbattbar.c	2003-11-01 14:55:10.000000000 +1100
@@ -27,6 +27,13 @@
 
 #include <sys/types.h>
 #include <sys/time.h>
+
+#ifdef __NetBSD__
+#define ENVSYSUNITNAMES
+#include <sys/envsys.h>
+#include <paths.h>
+#endif /* __NetBSD__ */
+
 #include <signal.h>
 #include <stdio.h>
 #include <unistd.h>
@@ -583,46 +590,165 @@
 #define _PATH_APM_CTLDEV       "/dev/apmctl"
 #define _PATH_APM_NORMAL       "/dev/apm"
 
+/*
+ * pre:  fd contains a valid file descriptor of an envsys(4) supporting device
+ *       && ns is the number of sensors
+ *       && etds and ebis are arrays of sufficient size
+ * post: returns 0 and etds and ebis arrays are filled with sensor info
+ *       or returns -1 on failure
+ */
+static int
+fillsensors(int fd, envsys_tre_data_t *etds, envsys_basic_info_t *ebis,
+    size_t ns)
+{
+	int i;
+
+	for (i = 0; i < ns; ++i) {
+		ebis[i].sensor = i;
+		if (ioctl(fd, ENVSYS_GTREINFO, &ebis[i]) == -1) {
+			warn("Can't get sensor info for sensor %d", i);
+			return 0;
+		}
+
+		etds[i].sensor = i;
+		if (ioctl(fd, ENVSYS_GTREDATA, &etds[i]) == -1) {
+			warn("Can't get sensor data for sensor %d", i);
+			return 0;
+		}
+	}
+	return 1;
+}
+
+/*
+ * pre:  fd contains a valid file descriptor of an envsys(4) supporting device
+ * post: returns the number of valid sensors provided by the device
+ *       or -1 on error
+ */
+static size_t
+numsensors(int fd)
+{
+	int count = 0, valid = 1;
+	envsys_tre_data_t etd;
+	etd.sensor = 0;
+
+	while (valid) {
+		if (ioctl(fd, ENVSYS_GTREDATA, &etd) == -1)
+			err(1, "Can't get sensor data");
+
+		valid = etd.validflags & ENVSYS_FVALID;
+		if (valid)
+			++count;
+
+		++etd.sensor;
+	}
+
+	return count;
+}
+
+static envsys_tre_data_t *etds;
+static envsys_basic_info_t *ebis;
+static int *cetds;
+
 int first = 1;
 void battery_check(void)
 {
        int fd, r, p;
        struct apm_power_info info;
+       int acpi;
+       size_t ns;
+       size_t cc;
+       int i;
 
+       acpi = 0;
        if ((fd = open(_PATH_APM_NORMAL, O_RDONLY)) == -1) {
-               fprintf(stderr, "xbattbar: cannot open apm device\n");
+	       fd = open(_PATH_SYSMON, O_RDONLY);
+	       acpi = 1;
+       }
+       if (fd < 0) {
+               fprintf(stderr, "xbattbar: cannot open %s device\n", (acpi) ? _PATH_SYSMON : _PATH_APM_NORMAL);
                exit(1);
        }
 
-       if (ioctl(fd, APM_IOC_GETPOWER, &info) != 0) {
-               fprintf(stderr, "xbattbar: ioctl APM_IOC_GETPOWER failed\n");
-               exit(1);
+       if (acpi) {
+		if ((ns = numsensors(fd)) == 0) {
+		       fprintf(stderr, "xbattbar: no sensors found\n");
+		       exit(1);
+		}
+		if (first) {
+			cetds = (int *)malloc(ns * sizeof(int));
+			etds = (envsys_tre_data_t *)malloc(ns * sizeof(envsys_tre_data_t));
+			ebis = (envsys_basic_info_t *)malloc(ns * sizeof(envsys_basic_info_t));
+
+			if ((cetds == NULL) || (etds == NULL) || (ebis == NULL)) {
+				err(1, "Out of memory");
+			}
+		}
+
+		fillsensors(fd, etds, ebis, ns);
+
+       } else {
+
+	       memset(&info, 0, sizeof(info));
+	       if (ioctl(fd, APM_IOC_GETPOWER, &info) != 0) {
+		       fprintf(stderr, "xbattbar: ioctl APM_IOC_GETPOWER failed\n");
+		       exit(1);
+	       }
        }
 
        close(fd);
 
        ++elapsed_time;
 
-       /* get current remoain */
-       if (info.battery_life > 100) {
-               /* some APM BIOSes return values slightly > 100 */
-               r = 100;
-       } else {
-               r = info.battery_life;
-       }
+       if (acpi) {
+		int32_t rtot = 0, maxtot = 0;
+		p = APM_AC_OFF;
+		for (i = 0 ; i < ns ; i++) {
+			if ((etds[i].validflags & ENVSYS_FCURVALID) == 0)
+				continue;
+			cc = strlen(ebis[i].desc);
+			if (strncmp(ebis[i].desc, "acpibat", 7) == 0 &&
+			    (strcmp(&ebis[i].desc[cc - 7], " charge") == 0 ||
+			     strcmp(&ebis[i].desc[cc - 7], " energy") == 0)) {
+				rtot += etds[i].cur.data_s;
+				maxtot += etds[i].max.data_s;
+			}
+			if (ebis[i].units == ENVSYS_INDICATOR &&
+			    etds[i].cur.data_s &&
+			    strncmp(ebis[i].desc, "acpiacad", 8) == 0 &&
+			    strcmp(&ebis[i].desc[cc - 10], " connected") == 0) {
+				p = APM_AC_ON;
+			}
+		}
+		r = (rtot * 100.0) / maxtot;
+	       if (first || ac_line != p || battery_level != r) {
+		       first = 0;
+		       ac_line = p;
+		       battery_level = r;
+		       redraw();
+	       }
 
-       /* get AC-line status */
-       if (info.ac_state == APM_AC_ON) {
-               p = APM_AC_ON;
        } else {
-               p = APM_AC_OFF;
-       }
-
-       if (first || ac_line != p || battery_level != r) {
-               first = 0;
-               ac_line = p;
-               battery_level = r;
-               redraw();
+	       /* get current remain */
+	       if (info.battery_life > 100) {
+		       /* some APM BIOSes return values slightly > 100 */
+		       r = 100;
+	       } else {
+		       r = info.battery_life;
+	       }
+
+	       /* get AC-line status */
+	       if (info.ac_state == APM_AC_ON) {
+		       p = APM_AC_ON;
+	       } else {
+		       p = APM_AC_OFF;
+	       }
+
+	       if (first || ac_line != p || battery_level != r) {
+		       first = 0;
+		       ac_line = p;
+		       battery_level = r;
+		       redraw();
+	       }
        }
 }
 
