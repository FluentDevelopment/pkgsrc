$NetBSD: patch-am,v 1.1 2003/09/30 23:03:59 christos Exp $

--- Xrm.cc.orig	1999-02-16 09:08:35.000000000 -0500
+++ Xrm.cc	2003-09-30 18:44:38.000000000 -0400
@@ -11,10 +11,13 @@
 #include <stdlib.h>
 #include <stdio.h>	//  For snprintf().
 #include <ctype.h>
-#include <iostream.h>
+#include <iostream>
 #include <unistd.h>  //  for access(), etc.  BCG
 #include "snprintf.h"
 #include "general.h"
+#ifndef NULL
+#define NULL 0
+#endif
 #include "Xrm.h"
 #include "Xrmcommandline.h"
 
@@ -29,7 +32,7 @@
 bool Xrm::_initialized = false;
 
 Xrm::Xrm(const char *instanceName, int argc, char **argv){
-  cerr << " Error:  This constructor is not supported yet.\n";
+  std::cerr << " Error:  This constructor is not supported yet." << std::endl;
   exit (-1);
   _db = NULL;
   _class = _instance = NULLQUARK;
@@ -114,7 +117,7 @@
   }
   else
   {
-    cerr << "Error:  Xrm:loadAndMergeResources() called twice!\n";
+    std::cerr << "Error:  Xrm:loadAndMergeResources() called twice!" << std::endl;
     exit (-1);
   }
   //  This is ugly code.  According to X and Xt rules, many files need
@@ -218,14 +221,14 @@
 
 
 //------------  Some debugging functions follow.  -----------------------
-inline ostream &operator<<(ostream &os, const XrmBinding &b){
+inline std::ostream &operator<<(std::ostream &os, const XrmBinding &b){
   switch (b){
   case XrmBindTightly:
     return os << ".";
   case XrmBindLoosely:
     return os << "*";
   default:
-    cerr <<"ostream operator<<(ostream &, const XrmBinding &) : "
+    std::cerr <<"std::ostream operator<<(std::ostream &, const XrmBinding &) : "
       <<"Unknown XrmBinding!";
     return os;
   }
@@ -233,7 +236,7 @@
   return os;
 }
 
-ostream &Xrm::dump(ostream &os) const {
+std::ostream &Xrm::dump(std::ostream &os) const {
   os <<"--- Xrm --- class: " <<XrmQuarkToString(_class)
      <<", instance: " <<XrmQuarkToString(_instance) <<"\n";
 
@@ -250,10 +253,10 @@
                  XrmQuarkList quarks, XrmRepresentation *type,
                  XrmValue *value, XPointer closure) {
   
-  ostream *os = (ostream *)closure;
+  std::ostream *os = (std::ostream *)closure;
   (void) type;  //  Avoid gcc warnings.
 
-  //cerr <<"type = " <<XrmQuarkToString(*type) <<endl;
+  //std::cerr <<"type = " <<XrmQuarkToString(*type) <<std::endl;
 
   int i = 0;
   while (quarks[i] != NULLQUARK){
--- Xrm.h.orig	1999-02-16 09:08:34.000000000 -0500
+++ Xrm.h	2003-09-30 19:01:04.000000000 -0400
@@ -10,14 +10,13 @@
 #define _Xrm_h
 
 #include "bool.h"
+#include <iostream>
 
 #define XRM_H_CVSID "$Id: patch-am,v 1.1 2003/09/30 23:03:59 christos Exp $"
 
 #include <X11/Xlib.h>
 #include <X11/Xresource.h>
 
-class ostream;
-
 class Xrm {
 public:
   Xrm(const char *className, const char *instanceName);
@@ -31,7 +30,7 @@
   const char* getDisplayName (int argc, char** argv);
   void loadAndMergeResources(int& argc, char** argv, Display* display);
 
-  ostream &dump(ostream &os) const;
+  std::ostream &dump(std::ostream &os) const;
 
 private:
   XrmDatabase _db;
@@ -47,7 +46,7 @@
   static bool _initialized;
 };
 
-inline ostream &operator<<(ostream &os, const Xrm &xrm){
+inline std::ostream &operator<<(std::ostream &os, const Xrm &xrm){
   return xrm.dump(os);
 }
 
