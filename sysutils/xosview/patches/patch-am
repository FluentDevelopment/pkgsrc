$NetBSD: patch-am,v 1.3 2003/10/01 01:14:35 christos Exp $

--- Xrm.cc.orig	1999-02-16 09:08:35.000000000 -0500
+++ Xrm.cc	2003-09-30 20:34:27.000000000 -0400
@@ -13,3 +13,3 @@
 #include <ctype.h>
-#include <iostream.h>
+#include <iostream>
 #include <unistd.h>  //  for access(), etc.  BCG
@@ -17,2 +17,5 @@
 #include "general.h"
+#ifndef NULL
+#define NULL 0
+#endif
 #include "Xrm.h"
@@ -31,3 +34,3 @@
 Xrm::Xrm(const char *instanceName, int argc, char **argv){
-  cerr << " Error:  This constructor is not supported yet.\n";
+  std::cerr << " Error:  This constructor is not supported yet." << std::endl;
   exit (-1);
@@ -116,3 +119,3 @@
   {
-    cerr << "Error:  Xrm:loadAndMergeResources() called twice!\n";
+    std::cerr << "Error:  Xrm:loadAndMergeResources() called twice!" << std::endl;
     exit (-1);
@@ -220,3 +223,3 @@
 //------------  Some debugging functions follow.  -----------------------
-inline ostream &operator<<(ostream &os, const XrmBinding &b){
+inline std::ostream &operator<<(std::ostream &os, const XrmBinding &b){
   switch (b){
@@ -227,3 +230,3 @@
   default:
-    cerr <<"ostream operator<<(ostream &, const XrmBinding &) : "
+    std::cerr <<"std::ostream operator<<(std::ostream &, const XrmBinding &) : "
       <<"Unknown XrmBinding!";
@@ -235,3 +238,3 @@
 
-ostream &Xrm::dump(ostream &os) const {
+std::ostream &Xrm::dump(std::ostream &os) const {
   os <<"--- Xrm --- class: " <<XrmQuarkToString(_class)
@@ -252,6 +255,6 @@
   
-  ostream *os = (ostream *)closure;
+  std::ostream *os = (std::ostream *)closure;
   (void) type;  //  Avoid gcc warnings.
 
-  //cerr <<"type = " <<XrmQuarkToString(*type) <<endl;
+  //std::cerr <<"type = " <<XrmQuarkToString(*type) <<std::endl;
 
--- Xrm.h.orig	1999-02-16 09:08:34.000000000 -0500
+++ Xrm.h	2003-09-30 20:34:27.000000000 -0400
@@ -18,4 +18,2 @@
 
-class ostream;
-
 class Xrm {
@@ -33,3 +31,3 @@
 
-  ostream &dump(ostream &os) const;
+  std::ostream &dump(std::ostream &os) const;
 
@@ -49,3 +47,3 @@
 
-inline ostream &operator<<(ostream &os, const Xrm &xrm){
+inline std::ostream &operator<<(std::ostream &os, const Xrm &xrm){
   return xrm.dump(os);
