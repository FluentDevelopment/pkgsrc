$NetBSD: patch-ae,v 1.1 2003/02/14 20:04:10 jmmv Exp $

Implement a --makefile-deinstall-rule option.  This is beeing tracked in
bug #104487. See http://bugzilla.gnome.org/show_bug.cgi?id=104487

--- gconf/gconftool.c.orig	19 Sep 2002 02:49:08 -0000
+++ gconf/gconftool.c	26 Jan 2003 21:15:51 -0000
@@ -52,6 +52,7 @@
 static const char* config_source = NULL;
 static int use_local_source = FALSE;
 static int makefile_install_mode = FALSE;
+static int makefile_deinstall_mode = FALSE;
 static int break_key_mode = FALSE;
 static int break_dir_mode = FALSE;
 static int short_docs_mode = FALSE;
@@ -282,6 +283,15 @@
     NULL
   },
   {
+    "makefile-deinstall-rule",
+    '\0',
+    POPT_ARG_NONE,
+    &makefile_deinstall_mode,
+    0,
+    N_("Properly deinstalls schema files on the command line from the database. GCONF_CONFIG_SOURCE environment variable should be set to a non-default config source or set to the empty string to use the default."),
+    NULL
+  },
+  {
     "break-key",
     '\0',
     POPT_ARG_NONE,
@@ -376,6 +386,7 @@
 static int do_break_key(GConfEngine* conf, const gchar** args);
 static int do_break_directory(GConfEngine* conf, const gchar** args);
 static int do_makefile_install(GConfEngine* conf, const gchar** args);
+static int do_makefile_deinstall(GConfEngine* conf, const gchar** args);
 static int do_recursive_list(GConfEngine* conf, const gchar** args);
 static int do_all_pairs(GConfEngine* conf, const gchar** args);
 static void list_pairs_in_dir(GConfEngine* conf, const gchar* dir, guint depth);
@@ -499,7 +510,8 @@
 
   if (ping_gconfd && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                       all_subdirs_mode || all_entries_mode || recursive_list || 
-                      spawn_gconfd || dir_exists || schema_file || makefile_install_mode ||
+                      spawn_gconfd || dir_exists || schema_file ||
+                      makefile_install_mode || makefile_deinstall_mode ||
                       break_key_mode || break_dir_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
     {
@@ -510,7 +522,8 @@
   if (dir_exists && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                      all_subdirs_mode || all_entries_mode || recursive_list || 
                      spawn_gconfd || schema_file || makefile_install_mode ||
-                     break_key_mode || break_dir_mode || short_docs_mode ||
+                     makefile_deinstall_mode || break_key_mode ||
+                     break_dir_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
     {
       fprintf(stderr, _("--dir-exists option must be used by itself.\n"));
@@ -520,7 +533,8 @@
   if (schema_file && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                       all_subdirs_mode || all_entries_mode || recursive_list || 
                       spawn_gconfd || dir_exists || makefile_install_mode ||
-                      break_key_mode || break_dir_mode || short_docs_mode ||
+                      makefile_deinstall_mode || break_key_mode ||
+                      break_dir_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
     {
       fprintf(stderr, _("--install-schema-file must be used by itself.\n"));
@@ -530,6 +544,7 @@
 
   if (makefile_install_mode && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                                 all_subdirs_mode || all_entries_mode || recursive_list || 
+                                makefile_deinstall_mode ||
                                 spawn_gconfd || dir_exists || schema_file ||
                                 break_key_mode || break_dir_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
@@ -539,10 +554,24 @@
     }
 
 
+  if (makefile_deinstall_mode && (shutdown_gconfd || set_mode || get_mode ||
+                                unset_mode || all_subdirs_mode ||
+                                all_entries_mode || recursive_list || 
+                                makefile_install_mode ||
+                                spawn_gconfd || dir_exists || schema_file ||
+                                break_key_mode || break_dir_mode || short_docs_mode ||
+                         long_docs_mode || schema_name_mode))
+    {
+      fprintf(stderr, _("--makefile-deinstall-rule must be used by itself.\n"));
+      return 1;
+    }
+
+
   if (break_key_mode && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                                 all_subdirs_mode || all_entries_mode || recursive_list || 
                                 spawn_gconfd || dir_exists || schema_file ||
-                                makefile_install_mode || break_dir_mode || short_docs_mode ||
+                                makefile_install_mode || makefile_deinstall_mode ||
+                                break_dir_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
     {
       fprintf(stderr, _("--break-key must be used by itself.\n"));
@@ -553,7 +582,8 @@
   if (break_dir_mode && (shutdown_gconfd || set_mode || get_mode || unset_mode ||
                                 all_subdirs_mode || all_entries_mode || recursive_list || 
                                 spawn_gconfd || dir_exists || schema_file ||
-                                break_key_mode || makefile_install_mode || short_docs_mode ||
+                                break_key_mode || makefile_install_mode ||
+                                makefile_deinstall_mode || short_docs_mode ||
                          long_docs_mode || schema_name_mode))
     {
       fprintf(stderr, _("--break-directory must be used by itself.\n"));
@@ -608,8 +638,15 @@
       g_print (_("GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL is set, not installing schemas\n"));
       makefile_install_mode = FALSE;
     }
-  
-  if (makefile_install_mode)
+
+  if (makefile_deinstall_mode &&
+      g_getenv ("GCONF_DISABLE_MAKEFILE_SCHEMA_DEINSTALL"))
+    {
+      g_print (_("GCONF_DISABLE_MAKEFILE_SCHEMA_DEINSTALL is set, not deinstalling schemas\n"));
+      makefile_deinstall_mode = FALSE;
+    }
+ 
+  if (makefile_install_mode || makefile_deinstall_mode)
     {
       g_assert (config_source == NULL);
 
@@ -701,6 +738,16 @@
       return retval;
     }
 
+  if (makefile_deinstall_mode)
+    {
+      const gchar** args = poptGetArgs(ctx);
+      gint retval = do_makefile_deinstall (conf, args);
+      
+      gconf_engine_unref (conf);
+
+      return retval;
+    }
+
   if (break_key_mode)
     {
       const gchar** args = poptGetArgs(ctx);
@@ -2158,7 +2205,7 @@
 }
 
 static void
-hash_foreach(gpointer key, gpointer value, gpointer user_data)
+hash_foreach_install(gpointer key, gpointer value, gpointer user_data)
 {
   SchemaInfo* info;
   GConfSchema* schema;
@@ -2186,6 +2233,36 @@
   gconf_schema_free(schema);
 }
 
+static void
+hash_foreach_deinstall(gpointer key, gpointer value, gpointer user_data)
+{
+  SchemaInfo* info;
+  GConfSchema* schema;
+  GError* error = NULL;
+  
+  info = user_data;
+  schema = value;
+
+  //if (!gconf_engine_set_schema(info->conf, info->key, schema, &error))
+  if (!gconf_engine_unset(info->conf, info->key, &error))
+    {
+      g_assert(error != NULL);
+
+      fprintf(stderr, _("WARNING: failed to deinstall schema `%s' locale `%s': %s\n"),
+              info->key, gconf_schema_get_locale(schema), error->message);
+      g_error_free(error);
+      error = NULL;
+    }
+  else
+    {
+      g_assert(error == NULL);
+      printf(_("Deinstalled schema `%s' from locale `%s'\n"),
+             info->key, gconf_schema_get_locale(schema));
+    }
+      
+  gconf_schema_free(schema);
+}
+
 
 static int
 process_key_list(GConfEngine* conf, const gchar* schema_name, GSList* keylist)
@@ -2197,22 +2274,47 @@
 
   while (tmp != NULL)
     {
-      if (!gconf_engine_associate_schema(conf, tmp->data, schema_name,  &error))
+      if (!makefile_deinstall_mode)
         {
-          g_assert(error != NULL);
-          
-          fprintf(stderr, _("WARNING: failed to associate schema `%s' with key `%s': %s\n"),
-                  schema_name, (gchar*)tmp->data, error->message);
-          g_error_free(error);
-          error = NULL;
+          if (!gconf_engine_associate_schema(conf, tmp->data, schema_name,
+              &error))
+            {
+              g_assert(error != NULL);
+
+              fprintf(stderr, _("WARNING: failed to associate schema `%s' "
+                                "with key `%s': %s\n"),
+                      schema_name, (gchar*)tmp->data, error->message);
+              g_error_free(error);
+              error = NULL;
+            }
+          else
+            {
+              g_assert(error == NULL);
+              printf(_("Attached schema `%s' to key `%s'\n"),
+                     schema_name, (gchar*)tmp->data);
+            }
         }
       else
         {
-          g_assert(error == NULL);
-          printf(_("Attached schema `%s' to key `%s'\n"),
-                 schema_name, (gchar*)tmp->data);
+          if (!gconf_engine_associate_schema(conf, tmp->data, NULL,
+              &error))
+            {
+              g_assert(error != NULL);
+
+              fprintf(stderr, _("WARNING: failed to deassociate schema `%s' "
+                                "with key `%s': %s\n"),
+                      schema_name, (gchar*)tmp->data, error->message);
+              g_error_free(error);
+              error = NULL;
+            }
+          else
+            {
+              g_assert(error == NULL);
+              printf(_("Deattached schema `%s' from key `%s'\n"),
+                     schema_name, (gchar*)tmp->data);
+            }
         }
-          
+
       tmp = g_slist_next(tmp);
     }
   
@@ -2292,8 +2394,11 @@
       return 1;
     }
       
-  /* Now install each schema in the hash into the GConfEngine */
-  g_hash_table_foreach(info.hash, hash_foreach, &info);
+  /* Now (de)install each schema in the hash into the GConfEngine */
+  if (makefile_deinstall_mode)
+    g_hash_table_foreach(info.hash, hash_foreach_deinstall, &info);
+  else
+    g_hash_table_foreach(info.hash, hash_foreach_install, &info);
 
   g_hash_table_destroy(info.hash);
 
@@ -2416,6 +2521,38 @@
   if (args == NULL)
     {
       fprintf(stderr, _("Must specify some schema files to install\n"));
+      return 1;
+    }
+
+  while (*args)
+    {
+      if (do_load_schema_file(conf, *args) != 0)
+        return 1;
+
+      ++args;
+    }
+
+  gconf_engine_suggest_sync(conf, &err);
+
+  if (err != NULL)
+    {
+      fprintf(stderr, _("Error syncing config data: %s"),
+              err->message);
+      g_error_free(err);
+      return 1;
+    }
+  
+  return 0;
+}
+
+static int
+do_makefile_deinstall(GConfEngine* conf, const gchar** args)
+{
+  GError* err = NULL;
+  
+  if (args == NULL)
+    {
+      fprintf(stderr, _("Must specify some schema files to deinstall\n"));
       return 1;
     }
 
