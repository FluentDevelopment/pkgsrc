$NetBSD: patch-al,v 1.2 2003/01/21 20:08:09 rh Exp $

--- sysdeps/freebsd/prockernel.c.orig	Tue Jun 11 07:34:42 2002
+++ sysdeps/freebsd/prockernel.c
@@ -34,7 +34,7 @@
 #if (!defined __OpenBSD__) && (!defined __bsdi__)
 #include <sys/user.h>
 #endif
-#if !defined(__bsdi__) && !(defined(__FreeBSD__) && defined(__alpha__))
+#if !defined(__bsdi__) && !(defined(__FreeBSD__) && defined(__alpha__)) && !defined(__NetBSD__)
 #include <machine/pcb.h>
 #endif
 #if defined(__FreeBSD__) && !defined(__alpha__)
@@ -48,6 +48,22 @@
 #include <osreldate.h>
 #endif
 
+#ifdef __NetBSD__
+#include <machine/vmparam.h>
+#include <machine/pmap.h>
+#ifdef __arm32__
+#define	KERNBASE	KERNEL_BASE
+#endif
+#endif
+
+#ifdef __NetBSD__
+#include <machine/vmparam.h>
+#include <machine/pmap.h>
+#ifdef __arm32__
+#define	KERNBASE	KERNEL_BASE
+#endif
+#endif
+
 static const unsigned long _glibtop_sysdeps_proc_kernel_pstats =
 (1L << GLIBTOP_PROC_KERNEL_MIN_FLT) +
 (1L << GLIBTOP_PROC_KERNEL_MAJ_FLT) +
@@ -101,6 +117,7 @@ glibtop_get_proc_kernel_p (glibtop *serv
 	if ((pinfo == NULL) || (count != 1))
 		glibtop_error_io_r (server, "kvm_getprocs (%d)", pid);
 
+#if !defined(__NetBSD__) || !defined(SACTIVE)
 	buf->nwchan = (unsigned long) pinfo [0].kp_proc.p_wchan &~ KERNBASE;
 	buf->flags |= (1L << GLIBTOP_PROC_KERNEL_NWCHAN);
 
@@ -112,6 +129,7 @@ glibtop_get_proc_kernel_p (glibtop *serv
 	} else {
 		buf->wchan [0] = 0;
 	}
+#endif
 
 	/* Taken from `saveuser ()' in `/usr/src/bin/ps/ps.c'. */
 
@@ -129,8 +147,16 @@ glibtop_get_proc_kernel_p (glibtop *serv
 
 	glibtop_suid_enter (server);
 
+#if !defined(__NetBSD__) || !defined(SACTIVE)
+#ifdef __NetBSD__
+	/* On NetBSD, there is no kvm_uread(), and kvm_read() always reads
+	 * from kernel memory.  */
+
+	if (kvm_read (server->machine.kd,
+#else
 	if ((pinfo [0].kp_proc.p_flag & P_INMEM) &&
 	    kvm_uread (server->machine.kd, &(pinfo [0]).kp_proc,
+#endif
 		       (unsigned long) &u_addr->u_stats,
 		       (char *) &pstats, sizeof (pstats)) == sizeof (pstats))
 		{
@@ -149,8 +175,12 @@ glibtop_get_proc_kernel_p (glibtop *serv
 			buf->flags |= _glibtop_sysdeps_proc_kernel_pstats;
 		}
 
+#ifdef __NetBSD__
+	if (kvm_read (server->machine.kd,
+#else
 	if ((pinfo [0].kp_proc.p_flag & P_INMEM) &&
 	    kvm_uread (server->machine.kd, &(pinfo [0]).kp_proc,
+#endif
 		       (unsigned long) &u_addr->u_pcb,
 		       (char *) &pcb, sizeof (pcb)) == sizeof (pcb))
 		{
@@ -167,16 +197,42 @@ glibtop_get_proc_kernel_p (glibtop *serv
 			/*xxx FreeBSD/Alpha? */
 #endif
 #else
+#ifdef __i386__
 			buf->kstk_esp = (u_int64_t) pcb.pcb_tss.tss_esp0;
 #ifdef __bsdi__
 			buf->kstk_eip = (u_int64_t) pcb.pcb_tss.tss_eip;
 #else
 			buf->kstk_eip = (u_int64_t) pcb.pcb_tss.__tss_eip;
 #endif
+#else
+#if defined(__NetBSD__)
+#if defined(__m68k__)
+			buf->kstk_esp = (u_int64_t) pcb.pcb_usp;
+			buf->kstk_eip = (u_int64_t) 0;
+#elif (defined(__arm32__) || defined(__powerpc__))
+			buf->kstk_esp = (u_int64_t) pcb.pcb_sp;
+			buf->kstk_eip = (u_int64_t) 0;
+#elif defined(__mipsel__)
+			buf->kstk_esp = (u_int64_t) pcb.pcb_context[8];
+			buf->kstk_eip = (u_int64_t) 0;
+#elif defined(__sparc__)
+			buf->kstk_esp = (u_int64_t) pcb.pcb_sp;
+			buf->kstk_eip = (u_int64_t) pcb.pcb_pc;
+#elif defined(__alpha__)
+			buf->kstk_esp = (u_int64_t) pcb.pcb_context[9];
+			buf->kstk_eip = (u_int64_t) pcb.pcb_context[8];
+#else
+			/* provide some defaults for other platforms */
+			buf->kstk_esp = (u_int64_t) 0;
+			buf->kstk_eip = (u_int64_t) 0;
+#endif /* ${MACHINE_ARCH} */
+#endif /* __NetBSD__ */
 
 			buf->flags |= _glibtop_sysdeps_proc_kernel_pcb;
 #endif
+#endif
 		}
+#endif
 
 	/* Taken from `wchan ()' in `/usr/src/bin/ps/print.c'. */
 
