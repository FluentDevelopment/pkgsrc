$NetBSD: patch-ax,v 1.1 2002/04/13 12:53:42 fredb Exp $

--- machdep/engine-m68000-netbsd.c.orig	Fri Dec 10 12:40:41 1999
+++ machdep/engine-m68000-netbsd.c
@@ -46,7 +46,6 @@
 #endif
 
-#include "pthread.h"
+#include <pthread.h>
 #include <sys/syscall.h>
-#include <sys/stat.h>
 
 /* ==========================================================================
@@ -67,5 +66,5 @@
 
 /* ==========================================================================
- * machdep_save_state()
+ * machdep_save_float_state()
  */
 void machdep_save_float_state(struct pthread * pthread)
@@ -73,6 +72,6 @@
     char * fdata = pthread->machdep_data.machdep_fstate;
 
-    __asm__ ( "fmovem fp0-fp7,%0"::"m" (*fdata) );
-    __asm__ ( "fmovem fpcr/fpsr/fpi,%0"::"m" (fdata[80]) );
+    __asm__ ( "fmovem %%fp0-%%fp7,%0"::"m" (*fdata) );
+    __asm__ ( "fmovem %%fpcr/%%fpsr/%%fpi,%0"::"m" (fdata[80]) );
 }
 
@@ -84,17 +83,6 @@
     char * fdata = pthread_run->machdep_data.machdep_fstate;
 
-    __asm__ ( "fmovem %0,fp0-fp7"::"m" (*fdata) );
-    __asm__ ( "fmovem %0,fpcr/fpsr/fpi"::"m" (fdata[80]) );
-
-}
-
-/* ==========================================================================
- * machdep_set_thread_timer()
- */
-void machdep_set_thread_timer(struct machdep_pthread *machdep_pthread)
-{
-    if (setitimer(ITIMER_VIRTUAL, &(machdep_pthread->machdep_timer), NULL)) {
-        PANIC("setitimer failed");
-    }
+    __asm__ ( "fmovem %0,%%fp0-%%fp7"::"m" (*fdata) );
+    __asm__ ( "fmovem %0,%%fpcr/%%fpsr/%%fpi"::"m" (fdata[80]) );
 }
 
@@ -112,30 +100,4 @@
 
 /* ==========================================================================
- * __machdep_stack_free()
- */
-void __machdep_stack_free(void * stack)
-{       
-    free(stack);
-}
- 
-/* ==========================================================================
- * __machdep_stack_alloc()
- */ 
-void * __machdep_stack_alloc(size_t size)
-{   
-    void * stack;
-    
-    return((void*)malloc(size));
-}     
-
-/* ==========================================================================
- * machdep_pthread_cleanup()
- */
-void *machdep_pthread_cleanup(struct machdep_pthread *machdep_pthread)
-{
-    return(machdep_pthread->machdep_stack);
-}
-
-/* ==========================================================================
  * machdep_pthread_start()
  */
@@ -172,5 +134,5 @@
  */
 void __machdep_pthread_create(struct machdep_pthread *machdep_pthread,
-  void *(* start_routine)(), void *start_argument, 
+  void *(* start_routine)(void *), void *start_argument, 
   long stack_size, long nsec, long flags)
 {
@@ -207,38 +169,4 @@
 
 /* ==========================================================================
- * machdep_sys_wait3() 
- */
-machdep_sys_wait3(int * b, int c, int * d)
-{
-        return(machdep_sys_wait4(0, b, c, d));
-}
- 
-/* ==========================================================================
- * machdep_sys_waitpid()
- */
-machdep_sys_waitpid(int a, int * b, int c)
-{
-        return(machdep_sys_wait4(a, b, c, NULL));
-}  
-
-/* ==========================================================================
- * machdep_sys_getdtablesize()
- */
-machdep_sys_getdtablesize()
-{
-        return(sysconf(_SC_OPEN_MAX));
-}  
-
-/* ==========================================================================
- * machdep_sys_getdirentries()
- */
-machdep_sys_getdirentries(int fd, char * buf, int len, int * seek)
-{
-        return(machdep_sys_getdents(fd, buf, len));
-}  
-
-extern off_t __syscall();
-
-/* ==========================================================================
  * machdep_sys_lseek()
  */
@@ -248,5 +176,8 @@
 }
 
-int machdep_sys_ftruncate( int fd, off_t length)
+/* ==========================================================================
+ * machdep_sys_ftruncate()
+ */
+int machdep_sys_ftruncate(int fd, off_t length)
 {
 	quad_t q;
@@ -263,6 +194,9 @@
 }
 
-int machdep_sys_fstat( int f, struct stat* st )
+/* ==========================================================================
+ * machdep_sys_fstat()
+ */
+int machdep_sys_fstat(int f, struct stat* st)
 {
-	return __fstat13(f,st);
+	return(__syscall((quad_t)SYS___fstat13, f, st));
 }
