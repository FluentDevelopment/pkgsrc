$NetBSD: patch-ag,v 1.1 2005/12/11 22:03:39 joerg Exp $

--- tvector.h.orig	2005-12-11 21:47:29.000000000 +0000
+++ tvector.h
@@ -60,13 +60,13 @@ class tvector: public tvector_base<T> {
    /// append an element to the end
    const tvector& operator += (const T& a) { push_back(a); return *this; }
    /// append another tvector to the end
-   const tvector& operator += (const tvector& a) { insert(end(), a.begin(), a.end()); return *this; }
+   const tvector& operator += (const tvector& a) { insert(tvector_base<T>::end(), a.begin(), a.end()); return *this; }
    /// direct read only access, safe
-   const T& operator[](size_t i) const { if(i < size()) return tvector_base<T>::operator[](i); else throw TZeroBasedIndexOutOfRangeException(i, size()); } // throw(TZeroBasedIndexOutOfRangeException);
+   const T& operator[](size_t i) const { if(i < this->size()) return tvector_base<T>::operator[](i); else throw TZeroBasedIndexOutOfRangeException(i, this->size()); } // throw(TZeroBasedIndexOutOfRangeException);
    /// direct read/write access, automatically create new elements
-   T& operator[](size_t i) { if(i >= size()) operator+=(tvector(i - size() + 1)); return tvector_base<T>::operator[](i); }
+   T& operator[](size_t i) { if(i >= this->size()) operator+=(tvector(i - this->size() + 1)); return tvector_base<T>::operator[](i); }
    /// clear vector
-   void clear() { erase(begin(), end()); }
+   void clear() { erase(this->begin(), this->end()); }
 };
 
 
