$NetBSD: patch-ac,v 1.3 2007/01/13 09:18:21 wiz Exp $

--- ext/flac/gstflacdec.c.orig	2006-10-16 18:22:46.000000000 +0000
+++ ext/flac/gstflacdec.c
@@ -56,6 +56,12 @@
 
 #include <gst/tag/tag.h>
 
+#if !defined(FLAC_API_VERSION_CURRENT) || FLAC_API_VERSION_CURRENT < 8
+#define LEGACY_FLAC
+#else
+#undef LEGACY_FLAC
+#endif
+
 GST_DEBUG_CATEGORY_STATIC (flacdec_debug);
 #define GST_CAT_DEFAULT flacdec_debug
 
@@ -93,9 +99,13 @@ static void gst_flac_dec_reset_decoders 
 static void gst_flac_dec_setup_seekable_decoder (GstFlacDec * flacdec);
 static void gst_flac_dec_setup_stream_decoder (GstFlacDec * flacdec);
 
+#ifdef LEGACY_FLAC
 static FLAC__SeekableStreamDecoderReadStatus
 gst_flac_dec_read_seekable (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__byte buffer[], unsigned *bytes, void *client_data);
+static FLAC__StreamDecoderReadStatus
+gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
+    FLAC__byte buffer[], unsigned *bytes, void *client_data);
 static FLAC__SeekableStreamDecoderSeekStatus
 gst_flac_dec_seek (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__uint64 position, void *client_data);
@@ -107,9 +117,6 @@ gst_flac_dec_length (const FLAC__Seekabl
     FLAC__uint64 * length, void *client_data);
 static FLAC__bool gst_flac_dec_eof (const FLAC__SeekableStreamDecoder * decoder,
     void *client_data);
-static FLAC__StreamDecoderReadStatus
-gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
-    FLAC__byte buffer[], unsigned *bytes, void *client_data);
 static FLAC__StreamDecoderWriteStatus
 gst_flac_dec_write_seekable (const FLAC__SeekableStreamDecoder * decoder,
     const FLAC__Frame * frame,
@@ -123,13 +130,38 @@ static void gst_flac_dec_metadata_callba
     const FLAC__StreamMetadata * metadata, void *client_data);
 static void gst_flac_dec_metadata_callback_stream (const FLAC__StreamDecoder *
     decoder, const FLAC__StreamMetadata * metadata, void *client_data);
-static void gst_flac_dec_metadata_callback (GstFlacDec * flacdec,
-    const FLAC__StreamMetadata * metadata);
 static void gst_flac_dec_error_callback_seekable (const
     FLAC__SeekableStreamDecoder * decoder,
     FLAC__StreamDecoderErrorStatus status, void *client_data);
 static void gst_flac_dec_error_callback_stream (const FLAC__StreamDecoder *
     decoder, FLAC__StreamDecoderErrorStatus status, void *client_data);
+#else
+static FLAC__StreamDecoderReadStatus
+gst_flac_dec_read_seekable (const FLAC__StreamDecoder * decoder,
+    FLAC__byte buffer[], size_t *bytes, void *client_data);
+static FLAC__StreamDecoderReadStatus
+gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
+    FLAC__byte buffer[], size_t *bytes, void *client_data);
+static FLAC__StreamDecoderSeekStatus
+gst_flac_dec_seek (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 position, void *client_data);
+static FLAC__StreamDecoderTellStatus
+gst_flac_dec_tell (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 * position, void *client_data);
+static FLAC__StreamDecoderLengthStatus
+gst_flac_dec_length (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 * length, void *client_data);
+static FLAC__bool gst_flac_dec_eof (const FLAC__StreamDecoder * decoder,
+    void *client_data);
+static FLAC__StreamDecoderWriteStatus
+gst_flac_dec_write_stream (const FLAC__StreamDecoder * decoder,
+    const FLAC__Frame * frame,
+    const FLAC__int32 * const buffer[], void *client_data);
+static void gst_flac_dec_metadata_callback_stream (const FLAC__StreamDecoder *
+    decoder, const FLAC__StreamMetadata * metadata, void *client_data);
+static void gst_flac_dec_error_callback_stream (const FLAC__StreamDecoder *
+    decoder, FLAC__StreamDecoderErrorStatus status, void *client_data);
+#endif
 
 GST_BOILERPLATE (GstFlacDec, gst_flac_dec, GstElement, GST_TYPE_ELEMENT);
 #define GST_FLAC_DEC_SRC_CAPS                             \
@@ -212,7 +244,11 @@ static void
 gst_flac_dec_reset_decoders (GstFlacDec * flacdec)
 {
   if (flacdec->seekable_decoder) {
+#ifdef LEGACY_FLAC
     FLAC__seekable_stream_decoder_delete (flacdec->seekable_decoder);
+#else
+    FLAC__stream_decoder_delete (flacdec->seekable_decoder);
+#endif
     flacdec->seekable_decoder = NULL;
   }
 
@@ -238,6 +274,7 @@ gst_flac_dec_setup_seekable_decoder (Gst
 {
   gst_flac_dec_reset_decoders (dec);
 
+#ifdef LEGACY_FLAC
   dec->seekable_decoder = FLAC__seekable_stream_decoder_new ();
 
   FLAC__seekable_stream_decoder_set_read_callback (dec->seekable_decoder,
@@ -259,6 +296,12 @@ gst_flac_dec_setup_seekable_decoder (Gst
   FLAC__seekable_stream_decoder_set_error_callback (dec->seekable_decoder,
       gst_flac_dec_error_callback_seekable);
   FLAC__seekable_stream_decoder_set_client_data (dec->seekable_decoder, dec);
+#else
+  dec->seekable_decoder = FLAC__stream_decoder_new ();
+
+  FLAC__stream_decoder_set_metadata_respond (dec->seekable_decoder, FLAC__METADATA_TYPE_VORBIS_COMMENT);
+  FLAC__stream_decoder_set_md5_checking (dec->seekable_decoder, false); /* no point calculating since it's never checked here */
+#endif
 }
 
 static void
@@ -270,17 +313,21 @@ gst_flac_dec_setup_stream_decoder (GstFl
 
   dec->stream_decoder = FLAC__stream_decoder_new ();
 
+#ifdef LEGACY_FLAC
   FLAC__stream_decoder_set_read_callback (dec->stream_decoder,
       gst_flac_dec_read_stream);
   FLAC__stream_decoder_set_write_callback (dec->stream_decoder,
       gst_flac_dec_write_stream);
-  FLAC__stream_decoder_set_metadata_respond (dec->stream_decoder,
-      FLAC__METADATA_TYPE_VORBIS_COMMENT);
   FLAC__stream_decoder_set_metadata_callback (dec->stream_decoder,
       gst_flac_dec_metadata_callback_stream);
   FLAC__stream_decoder_set_error_callback (dec->stream_decoder,
       gst_flac_dec_error_callback_stream);
   FLAC__stream_decoder_set_client_data (dec->stream_decoder, dec);
+#else
+  FLAC__stream_decoder_set_md5_checking (dec->stream_decoder, false); /* no point calculating since it's never checked here */
+#endif
+  FLAC__stream_decoder_set_metadata_respond (dec->stream_decoder,
+      FLAC__METADATA_TYPE_VORBIS_COMMENT);
 }
 
 static void
@@ -544,6 +591,7 @@ gst_flac_dec_metadata_callback (GstFlacD
   }
 }
 
+#ifdef LEGACY_FLAC
 static void
 gst_flac_dec_metadata_callback_seekable (const FLAC__SeekableStreamDecoder * d,
     const FLAC__StreamMetadata * metadata, void *client_data)
@@ -552,6 +600,7 @@ gst_flac_dec_metadata_callback_seekable 
 
   gst_flac_dec_metadata_callback (dec, metadata);
 }
+#endif
 
 static void
 gst_flac_dec_metadata_callback_stream (const FLAC__StreamDecoder * decoder,
@@ -587,12 +636,14 @@ gst_flac_dec_error_callback (GstFlacDec 
   dec->last_flow = GST_FLOW_ERROR;
 }
 
+#ifdef LEGACY_FLAC
 static void
 gst_flac_dec_error_callback_seekable (const FLAC__SeekableStreamDecoder * d,
     FLAC__StreamDecoderErrorStatus status, void *client_data)
 {
   gst_flac_dec_error_callback (GST_FLAC_DEC (client_data), status);
 }
+#endif
 
 static void
 gst_flac_dec_error_callback_stream (const FLAC__StreamDecoder * d,
@@ -601,9 +652,15 @@ gst_flac_dec_error_callback_stream (cons
   gst_flac_dec_error_callback (GST_FLAC_DEC (client_data), status);
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__SeekableStreamDecoderSeekStatus
 gst_flac_dec_seek (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__uint64 position, void *client_data)
+#else
+static FLAC__StreamDecoderSeekStatus
+gst_flac_dec_seek (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 position, void *client_data)
+#endif
 {
   GstFlacDec *flacdec;
 
@@ -612,12 +669,22 @@ gst_flac_dec_seek (const FLAC__SeekableS
   GST_DEBUG ("seek %" G_GINT64_FORMAT, position);
   flacdec->offset = position;
 
+#ifdef LEGACY_FLAC
   return FLAC__SEEKABLE_STREAM_DECODER_SEEK_STATUS_OK;
+#else
+  return FLAC__STREAM_DECODER_SEEK_STATUS_OK;
+#endif
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__SeekableStreamDecoderTellStatus
 gst_flac_dec_tell (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__uint64 * position, void *client_data)
+#else
+static FLAC__StreamDecoderTellStatus
+gst_flac_dec_tell (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 * position, void *client_data)
+#endif
 {
   GstFlacDec *flacdec;
 
@@ -627,12 +694,22 @@ gst_flac_dec_tell (const FLAC__SeekableS
 
   GST_DEBUG ("tell %" G_GINT64_FORMAT, *position);
 
+#ifdef LEGACY_FLAC
   return FLAC__SEEKABLE_STREAM_DECODER_TELL_STATUS_OK;
+#else
+  return FLAC__STREAM_DECODER_TELL_STATUS_OK;
+#endif
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__SeekableStreamDecoderLengthStatus
 gst_flac_dec_length (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__uint64 * length, void *client_data)
+#else
+static FLAC__StreamDecoderLengthStatus
+gst_flac_dec_length (const FLAC__StreamDecoder * decoder,
+    FLAC__uint64 * length, void *client_data)
+#endif
 {
   GstFlacDec *flacdec;
   GstFormat fmt = GST_FORMAT_BYTES;
@@ -642,22 +719,40 @@ gst_flac_dec_length (const FLAC__Seekabl
   flacdec = GST_FLAC_DEC (client_data);
 
   if (!(peer = gst_pad_get_peer (flacdec->sinkpad)))
+#ifdef LEGACY_FLAC
     return FLAC__SEEKABLE_STREAM_DECODER_LENGTH_STATUS_ERROR;
+#else
+    return FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR;
+#endif
   gst_pad_query_duration (peer, &fmt, &len);
   gst_object_unref (peer);
   if (fmt != GST_FORMAT_BYTES || len == -1)
+#ifdef LEGACY_FLAC
     return FLAC__SEEKABLE_STREAM_DECODER_LENGTH_STATUS_ERROR;
+#else
+    return FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR;
+#endif
 
   *length = len;
 
   GST_DEBUG ("length %" G_GINT64_FORMAT, *length);
 
+#ifdef LEGACY_FLAC
   return FLAC__SEEKABLE_STREAM_DECODER_LENGTH_STATUS_OK;
+#else
+  return FLAC__STREAM_DECODER_LENGTH_STATUS_OK;
+#endif
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__bool
 gst_flac_dec_eof (const FLAC__SeekableStreamDecoder * decoder,
     void *client_data)
+#else
+static FLAC__bool
+gst_flac_dec_eof (const FLAC__StreamDecoder * decoder,
+    void *client_data)
+#endif
 {
   GstFlacDec *flacdec;
   GstFormat fmt;
@@ -685,9 +780,15 @@ gst_flac_dec_eof (const FLAC__SeekableSt
   return ret;
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__SeekableStreamDecoderReadStatus
 gst_flac_dec_read_seekable (const FLAC__SeekableStreamDecoder * decoder,
     FLAC__byte buffer[], unsigned *bytes, void *client_data)
+#else
+static FLAC__StreamDecoderReadStatus
+gst_flac_dec_read_seekable (const FLAC__StreamDecoder * decoder,
+    FLAC__byte buffer[], size_t *bytes, void *client_data)
+#endif
 {
   GstFlacDec *flacdec;
   GstBuffer *buf;
@@ -696,7 +797,11 @@ gst_flac_dec_read_seekable (const FLAC__
 
   if (gst_pad_pull_range (flacdec->sinkpad, flacdec->offset, *bytes,
           &buf) != GST_FLOW_OK)
+#ifdef LEGACY_FLAC
     return FLAC__SEEKABLE_STREAM_DECODER_READ_STATUS_ERROR;
+#else
+    return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
+#endif
 
   GST_DEBUG ("Read %d bytes at %" G_GUINT64_FORMAT,
       GST_BUFFER_SIZE (buf), flacdec->offset);
@@ -705,12 +810,22 @@ gst_flac_dec_read_seekable (const FLAC__
   gst_buffer_unref (buf);
   flacdec->offset += *bytes;
 
+#ifdef LEGACY_FLAC
   return FLAC__SEEKABLE_STREAM_DECODER_READ_STATUS_OK;
+#else
+  return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
+#endif
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__StreamDecoderReadStatus
 gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
     FLAC__byte buffer[], unsigned *bytes, void *client_data)
+#else
+static FLAC__StreamDecoderReadStatus
+gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
+    FLAC__byte buffer[], size_t *bytes, void *client_data)
+#endif
 {
   GstFlacDec *dec = GST_FLAC_DEC (client_data);
   guint len;
@@ -880,6 +995,7 @@ done:
   return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
 }
 
+#ifdef LEGACY_FLAC
 static FLAC__StreamDecoderWriteStatus
 gst_flac_dec_write_seekable (const FLAC__SeekableStreamDecoder * decoder,
     const FLAC__Frame * frame,
@@ -887,6 +1003,7 @@ gst_flac_dec_write_seekable (const FLAC_
 {
   return gst_flac_dec_write (GST_FLAC_DEC (client_data), frame, buffer);
 }
+#endif
 
 static FLAC__StreamDecoderWriteStatus
 gst_flac_dec_write_stream (const FLAC__StreamDecoder * decoder,
@@ -900,7 +1017,12 @@ static void
 gst_flac_dec_loop (GstPad * sinkpad)
 {
   GstFlacDec *flacdec;
+#ifdef LEGACY_FLAC
   FLAC__SeekableStreamDecoderState s;
+#else
+  FLAC__StreamDecoderState s;
+  FLAC__StreamDecoderInitStatus is;
+#endif
 
   flacdec = GST_FLAC_DEC (GST_OBJECT_PARENT (sinkpad));
 
@@ -908,9 +1030,15 @@ gst_flac_dec_loop (GstPad * sinkpad)
 
   if (flacdec->init) {
     GST_DEBUG_OBJECT (flacdec, "initializing decoder");
+#ifdef LEGACY_FLAC
     s = FLAC__seekable_stream_decoder_init (flacdec->seekable_decoder);
     if (s != FLAC__SEEKABLE_STREAM_DECODER_OK)
       goto analyze_state;
+#else
+    is = FLAC__stream_decoder_init_stream (flacdec->seekable_decoder, gst_flac_dec_read_seekable, gst_flac_dec_seek, gst_flac_dec_tell, gst_flac_dec_length, gst_flac_dec_eof, gst_flac_dec_write_stream, gst_flac_dec_metadata_callback_stream, gst_flac_dec_error_callback_stream, flacdec);
+    if (is != FLAC__STREAM_DECODER_INIT_STATUS_OK)
+      goto analyze_state;
+#endif
     /*    FLAC__seekable_stream_decoder_process_metadata (flacdec->seekable_decoder); */
     flacdec->init = FALSE;
   }
@@ -920,15 +1048,31 @@ gst_flac_dec_loop (GstPad * sinkpad)
   flacdec->last_flow = GST_FLOW_OK;
 
   GST_LOG_OBJECT (flacdec, "processing single");
+#ifdef LEGACY_FLAC
   FLAC__seekable_stream_decoder_process_single (flacdec->seekable_decoder);
+#else
+  FLAC__stream_decoder_process_single (flacdec->seekable_decoder);
+#endif
 
 analyze_state:
 
   GST_LOG_OBJECT (flacdec, "done processing, checking encoder state");
+#ifdef LEGACY_FLAC
   s = FLAC__seekable_stream_decoder_get_state (flacdec->seekable_decoder);
+#else
+  s = FLAC__stream_decoder_get_state (flacdec->seekable_decoder);
+#endif
   switch (s) {
+#ifdef LEGACY_FLAC
     case FLAC__SEEKABLE_STREAM_DECODER_OK:
-    case FLAC__SEEKABLE_STREAM_DECODER_SEEKING:{
+    case FLAC__SEEKABLE_STREAM_DECODER_SEEKING:
+#else
+    case FLAC__STREAM_DECODER_SEARCH_FOR_METADATA:
+    case FLAC__STREAM_DECODER_READ_METADATA:
+    case FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC:
+    case FLAC__STREAM_DECODER_READ_FRAME:
+#endif
+    {
       GST_DEBUG_OBJECT (flacdec, "everything ok");
 
       if (flacdec->last_flow != GST_FLOW_OK &&
@@ -956,9 +1100,18 @@ analyze_state:
       return;
     }
 
-    case FLAC__SEEKABLE_STREAM_DECODER_END_OF_STREAM:{
+#ifdef LEGACY_FLAC
+    case FLAC__SEEKABLE_STREAM_DECODER_END_OF_STREAM:
+#else
+    case FLAC__STREAM_DECODER_END_OF_STREAM:
+#endif
+    {
       GST_DEBUG_OBJECT (flacdec, "EOS");
+#ifdef LEGACY_FLAC
       FLAC__seekable_stream_decoder_reset (flacdec->seekable_decoder);
+#else
+      FLAC__stream_decoder_reset (flacdec->seekable_decoder);
+#endif
 
       if ((flacdec->segment.flags & GST_SEEK_FLAG_SEGMENT) != 0) {
         if (flacdec->segment.duration > 0) {
@@ -972,6 +1125,7 @@ analyze_state:
       goto eos_and_pause;
     }
 
+#ifdef LEGACY_FLAC
     case FLAC__SEEKABLE_STREAM_DECODER_MEMORY_ALLOCATION_ERROR:
     case FLAC__SEEKABLE_STREAM_DECODER_STREAM_DECODER_ERROR:
     case FLAC__SEEKABLE_STREAM_DECODER_READ_ERROR:
@@ -979,11 +1133,23 @@ analyze_state:
     case FLAC__SEEKABLE_STREAM_DECODER_ALREADY_INITIALIZED:
     case FLAC__SEEKABLE_STREAM_DECODER_INVALID_CALLBACK:
     case FLAC__SEEKABLE_STREAM_DECODER_UNINITIALIZED:
+#else
+    case FLAC__STREAM_DECODER_OGG_ERROR:
+    case FLAC__STREAM_DECODER_SEEK_ERROR:
+    case FLAC__STREAM_DECODER_ABORTED:
+    case FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR:
+    case FLAC__STREAM_DECODER_UNINITIALIZED:
+#endif
     default:{
       /* fixme: this error sucks -- should try to figure out when/if an more
          specific error was already sent via the callback */
+#ifdef LEGACY_FLAC
       GST_ELEMENT_ERROR (flacdec, STREAM, DECODE, (NULL),
           ("%s", FLAC__SeekableStreamDecoderStateString[s]));
+#else
+      GST_ELEMENT_ERROR (flacdec, STREAM, DECODE, (NULL),
+          ("%s", FLAC__StreamDecoderStateString[s]));
+#endif
       goto eos_and_pause;
     }
   }
@@ -1113,11 +1279,19 @@ gst_flac_dec_chain (GstPad * pad, GstBuf
 
   if (dec->init) {
     GST_DEBUG_OBJECT (dec, "initializing decoder");
+#ifdef LEGACY_FLAC
     s = FLAC__stream_decoder_init (dec->stream_decoder);
     if (s != FLAC__STREAM_DECODER_SEARCH_FOR_METADATA) {
       GST_ELEMENT_ERROR (GST_ELEMENT (dec), LIBRARY, INIT, (NULL), (NULL));
       return GST_FLOW_ERROR;
     }
+#else
+    s = FLAC__stream_decoder_init_stream (dec->stream_decoder, gst_flac_dec_read_stream, NULL, NULL, NULL, NULL, gst_flac_dec_write_stream, gst_flac_dec_metadata_callback_stream, gst_flac_dec_error_callback_stream, dec);
+    if (s != FLAC__STREAM_DECODER_INIT_STATUS_OK) {
+      GST_ELEMENT_ERROR (GST_ELEMENT (dec), LIBRARY, INIT, (NULL), (NULL));
+      return GST_FLOW_ERROR;
+    }
+#endif
     GST_DEBUG_OBJECT (dec, "initialized (framed=%d)", dec->framed);
     dec->init = FALSE;
   }
@@ -1598,8 +1772,13 @@ gst_flac_dec_handle_seek_event (GstFlacD
   flacdec->seeking = TRUE;
 
   seek_ok =
+#ifdef LEGACY_FLAC
       FLAC__seekable_stream_decoder_seek_absolute (flacdec->seekable_decoder,
       segment.start);
+#else
+      FLAC__stream_decoder_seek_absolute (flacdec->seekable_decoder,
+      segment.start);
+#endif
 
   flacdec->seeking = FALSE;
 
