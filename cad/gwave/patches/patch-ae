$NetBSD: patch-ae,v 1.2 2007/01/23 02:49:23 dmcmahill Exp $

- fix multiline strings which newer gcc's don't like
- fix __inline__ which sunpro doesn't like

--- src/scwm_guile.c.orig	2002-03-27 23:07:03.000000000 -0500
+++ src/scwm_guile.c
@@ -42,15 +42,21 @@
 #include "dmalloc.h"
 #endif
 
+#ifndef __GNUC__
+#ifndef __inline__
+#define __inline__ 
+#endif
+#endif
+
 extern char *prog_name;
 
 XSCM_HOOK(error_hook, "error-hook", 5, (SCM a, SCM b, SCM c, SCM d, SCM e),
-"Called on all kinds of errors and exceptions.
-Whenever an error or other uncaught throw occurs on any callback,
-whether a hook, a mouse binding, a key binding, a menu entry, a file
-being processed, or anything else, error-hook will be invoked. Each
-procedure in the hook will be called with the throw arguments; these
-will generally include information about the nature of the error.");
+"Called on all kinds of errors and exceptions."
+"Whenever an error or other uncaught throw occurs on any callback,"
+"whether a hook, a mouse binding, a key binding, a menu entry, a file"
+"being processed, or anything else, error-hook will be invoked. Each"
+"procedure in the hook will be called with the throw arguments; these"
+"will generally include information about the nature of the error.");
 
 struct scwm_body_apply_data {
   SCM proc;
@@ -209,12 +215,12 @@ scwm_safe_call7 (SCM proc, SCM arg1, SCM
 /* FIXDOC: We need a way to cross-reference concepts in docs. */
 
 XSCM_CONCEPT("Hooks",
-"Hooks are used throughout gwave to provide a convenient mechanism for
-user callbacks on particular events. Fundamentally, a hook is just a
-variable that contains a list of procedures that are called in order
-when the relevant event occurs. However, several convenience macros
-are provided for manipulating hooks; see `add-hook!', `remove-hook!',
-`reset-hook!', and `run-hook'.");
+"Hooks are used throughout gwave to provide a convenient mechanism for"
+"user callbacks on particular events. Fundamentally, a hook is just a"
+"variable that contains a list of procedures that are called in order"
+"when the relevant event occurs. However, several convenience macros"
+"are provided for manipulating hooks; see `add-hook!', `remove-hook!',"
+"`reset-hook!', and `run-hook'.");
 
 static SCM run_hook_proc;
 
@@ -395,11 +401,11 @@ scwm_handle_error (void *ARG_IGNORE(data
 
 XSCM_DEFINE(safe_load, "safe-load", 1, 0, 0,
            (SCM fname),
-"Load file FNAME while trapping and displaying errors.
-Each individual top-level-expression is evaluated separately and all
-errors are trapped and displayed.  You should use this procedure if
-you need to make sure most of a file loads, even if it may contain
-errors.")
+"Load file FNAME while trapping and displaying errors."
+"Each individual top-level-expression is evaluated separately and all"
+"errors are trapped and displayed.  You should use this procedure if"
+"you need to make sure most of a file loads, even if it may contain"
+"errors.")
 #define FUNC_NAME s_safe_load
 {
   SCM_STACKITEM stack_item;
